version: '3.9'

services:
  bot:
    build: .
    container_name: container_bot_2
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      influxdb:
        condition: service_started
    deploy:
      resources: # Ограничения ресурсов
        limits:
          memory: 512M
        reservations:
          memory: 128M
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - OWNER=${OWNER}
      - ADMIN_LIST=${ADMIN_LIST}
      - HOME_GROUP=${HOME_GROUP}
      - WORK_GROUP=${WORK_GROUP}
      - DB_POST=${DB_POST}
      - DB_LITE=${DB_LITE}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    networks:
      - botnet_2 # Подключение к сети botnet_2
    restart: unless-stopped # Автоматический перезапуск контейнера, если он остановится

  db:
    image: postgres:15 # Образ PostgreSQL версии 15
    container_name: container_db_2
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./database/postgres/db:/var/lib/postgresql/data # Сохраняем данные базы данных на локальном диске
    ports:
      - "5433:5432"
    networks:
      - botnet_2
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine # Образ Redis версии Alpine
    container_name: container_redis_2
    ports:
      - "6380:6379"
    volumes:
      - redis_data_2:/data # Сохраняем данные Redis как Docker volume
    networks:
      - botnet_2
    restart: unless-stopped

  influxdb:
    image: influxdb:2.7 # Образ InfluxDB версии 2.7
    container_name: container_influxdb_2
    environment:
      # Параметры инициализации InfluxDB
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_ADMIN_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - ./database/influxdb:/var/lib/influxdb2 # Сохраняем данные InfluxDB на локальном диске
    command: influxd run --bolt-path /var/lib/influxdb2/influxd.bolt --engine-path /var/lib/influxdb2/engine --store bolt
    ports:
      - "8087:8086"
    networks:
      - botnet_2
    restart: unless-stopped
    healthcheck: # Проверка состояния InfluxDB
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s

  grafana:
    image: grafana/grafana:10.2.0 # Образ Grafana для визуализации данных
    container_name: container_grafana_2
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports:
      - "3001:3000"
    user: "472:472" # Используем UID и GID для grafana
    volumes:
      - ./database/grafana:/var/lib/grafana:rw # Сохраняем данные Grafana на локальном диске
    networks:
      - botnet_2
    restart: unless-stopped

networks:
  botnet_2:
    name: botnet_2 # Принудительно задаем имя сети
    driver: bridge # Используем драйвер bridge для создания сети

volumes:
  redis_data_2:
    driver: local # Используем локальный драйвер для хранения данных Redis