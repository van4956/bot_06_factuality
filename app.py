# –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:
# docker == 1 - —ç—Ç–æ –∑–∞–ø—É—Å–∫ –≤ docker - docker-compose up -d
# docker == 0 - —ç—Ç–æ –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ - ctrl + B
docker = 0

import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='  -  [%(asctime)s] #%(levelname)-5s -  %(name)s:%(lineno)d  -  %(message)s')
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è SQLAlchemy
sqlalchemy_logger = logging.getLogger('sqlalchemy.engine')
sqlalchemy_logger.setLevel(logging.INFO)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, INFO)
sqlalchemy_logger.propagate = True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–º—É –ª–æ–≥–≥–µ—Ä—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥–≤–∞–∏–≤–∞—Ç—å –∏—Ö

import asyncio
from datetime import datetime, timezone

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.strategy import FSMStrategy
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from redis.asyncio.client import Redis
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils.i18n import ConstI18nMiddleware, I18n, SimpleI18nMiddleware, FSMI18nMiddleware
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine
from influxdb_client.client.write.point import Point
from influxdb_client.client.influxdb_client import InfluxDBClient
from influxdb_client.client.write_api import SYNCHRONOUS

from config_data.config import Config, load_config

from handlers import other, admin, group, start, owner, donate, inline, factuality, correct_answer
from common.comands import private
from database.models import Base
from middlewares import counter, db, locale, throttle


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å InfluxDB –∏ Grafana
async def analytics(user_id: int, command_name: str, category_name: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å InfluxDB –∏ Grafana"""
    if docker == 1:
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ InfluxDB
            client = InfluxDBClient(url=config.influx.url, token=config.influx.token, org=config.influx.org)
            write_api = client.write_api(write_options=SYNCHRONOUS)
            current_time = datetime.now(timezone.utc)

            # –°–æ–∑–¥–∞–µ–º Point –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ InfluxDB —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            point = (
                    Point("bot_command_usage")
                    .tag("category", category_name)
                    .tag("command", command_name)
                    .tag("user_id", user_id)
                    .tag("ping", "ping")
                    .time(current_time)
                    .field("value", 1)
                    )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º point –≤ InfluxDB
            write_api.write(bucket=config.influx.bucket, org=config.influx.org, record=point)

        except Exception as e:
            logging.error("InfluxDB write error: %s", str(e))
        finally:
            client.close()
    else: # –µ—Å–ª–∏ docker == 0
        pass


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
if docker == 1:
    storage = RedisStorage(redis=Redis(host=config.redis.host, port=config.redis.port))  # –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ Redis
else:
    storage = MemoryStorage()  # –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –≤—Å—ë —Å—Ç–∏—Ä–∞–µ—Ç—Å—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)

logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä')
bot = Bot(token=config.tg_bot.token,
          default=DefaultBotProperties(parse_mode=ParseMode.HTML,
                                       link_preview=None,
                                       link_preview_is_disabled=None,
                                       link_preview_prefer_large_media=None,
                                       link_preview_prefer_small_media=None,
                                       link_preview_show_above_text=None))
bot.owner = config.tg_bot.owner
bot.admin_list = config.tg_bot.admin_list
bot.home_group = config.tg_bot.home_group
bot.work_group = config.tg_bot.work_group


dp = Dispatcher(fsm_strategy=FSMStrategy.USER_IN_CHAT, storage=storage)
# USER_IN_CHAT  -  –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —é–∑–µ—Ä–∞, –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ –≤–µ–¥–µ—Ç—Å—è —Å–≤–æ—è –∑–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø–æ –¥–µ—Ñ–æ–ª—Ç—É)
# GLOBAL_USER  -  –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —é–∑–µ—Ä–∞ –≤–µ–∑–¥–µ –≤–µ–¥–µ—Ç—Å—è —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–¥
if docker == 1:
    engine = create_async_engine(config.db.db_post, echo=False)  # PostgreSQL
else:
    engine = create_async_engine(config.db.db_lite, echo=False)  # SQLite (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)

# –°–æ–∑–¥–∞–µ–º –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω—É—é —Å–µ—Å—Å–∏—é
session_maker = async_sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)

# –ü–æ–º–µ—â–∞–µ–º –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ workflow_data –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
some_var_1 = 1
some_var_2 = 'Some text'
dp.workflow_data.update({'my_int_var': some_var_1,
                         'my_text_var': some_var_2,
                         'analytics': analytics})

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∏–¥–ª–≤–∞—Ä–∏
dp.update.outer_middleware(throttle.ThrottleMiddleware())  # —Ç—Ä–æ—Ç–ª–∏–Ω–≥ —á—Ä–µ–∑–º–µ—Ä–Ω–æ —á–∞—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
dp.update.outer_middleware(counter.CounterMiddleware())  # –ø—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫
dp.update.outer_middleware(db.DataBaseSession(session_pool=session_maker))  # –º–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–∫–∏–¥—ã–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
dp.update.outer_middleware(locale.LocaleFromDBMiddleware(workflow_data=dp.workflow_data))  # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å –∏–∑ –ë–î –∏ –ø–µ—Ä–µ–¥–∞–º –µ–µ –≤ FSMContext
i18n = I18n(path="locales", default_locale="ru", domain="bot_00_template")  # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç I18n
dp.update.middleware(FSMI18nMiddleware(i18n=i18n))  # –ø–æ–ª—É—á—è–µ–º —è–∑—ã–∫ –Ω–∞ –∫–∞–∂–¥—ã–π –∞–ø–¥–µ–π—Ç, —á–µ—Ä–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ FSMContext

# dp.update.middleware(ConstI18nMiddleware(locale='ru', i18n=i18n))  # –∑–∞–¥–∞–µ–º –ª–æ–∫–∞–ª—å –∫–∞–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
# dp.update.middleware(SimpleI18nMiddleware(i18n=i18n))  # –∑–∞–¥–∞–µ–º –ª–æ–∫–∞–ª—å –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ–ª—è "language_code" –∞–ø–¥–µ–π—Ç–∞

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(start.start_router)
dp.include_router(owner.owner_router)
dp.include_router(admin.admin_router)
dp.include_router(other.other_router)
dp.include_router(donate.donate_router)
dp.include_router(group.group_router)
dp.include_router(inline.inline_router)
dp.include_router(factuality.factuality_router)
dp.include_router(correct_answer.correct_answer_router)


# –¢–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –±–æ—Ç–æ–º
# ALLOWED_UPDATES = ['message', 'edited_message', 'callback_query',]  # –û—Ç–±–∏—Ä–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤
ALLOWED_UPDATES = dp.resolve_used_update_types()  # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–æ—É—Ç–µ—Ä–∞–º

# –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def on_startup():
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    await bot.send_message(chat_id = bot.home_group[0], text = f"ü§ñ  @{bot_username}  -  –∑–∞–ø—É—â–µ–Ω!")

# –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def on_shutdown():
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    await bot.send_message(chat_id = bot.home_group[0], text = f"‚ò†Ô∏è  @{bot_username}  -  –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main() -> None:

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –±–∞–∑—ã, –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–Ω–æ–≤–æ
    async with engine.begin() as connection:
        await connection.run_sync(Base.metadata.drop_all)
        await connection.run_sync(Base.metadata.create_all)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã - —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫–∏ (—Ç–æ —á—Ç–æ –±–æ—Ç –ø–æ–ª—É—á–∏–ª –ø–æ–∫–∞ —Å–ø–∞–ª)
    await bot.delete_webhook(drop_pending_updates=True)

    # –£–¥–∞–ª—è–µ–º —Ä–∞–Ω–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞ –≤–æ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    await bot.delete_my_commands(scope=types.BotCommandScopeAllPrivateChats())

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã
    await bot.set_my_commands(commands=private, scope=types.BotCommandScopeAllPrivateChats())


    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    try:
        await dp.start_polling(bot,
                               allowed_updates=ALLOWED_UPDATES,)
                            #    skip_updates=False)  # –ï—Å–ª–∏ –±–æ—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏, –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
