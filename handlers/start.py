import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from icecream import ic
ic.configureOutput(includeContext=True, prefix=' >>> Debag >>> ')

from aiogram import F, Router, Bot
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import Message, FSInputFile
from aiogram.filters import ChatMemberUpdatedFilter, KICKED, MEMBER
from aiogram.fsm.context import FSMContext
from aiogram.types import ChatMemberUpdated
from aiogram.utils.i18n import gettext as _

from database.orm_users import orm_add_user, orm_get_ids, orm_get_users, orm_update_status
from database.orm_answers import orm_get_answer
from common import keyboard


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
start_router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start
@start_router.message(CommandStart())
async def start_cmd(message: Message, session: AsyncSession, bot: Bot, workflow_data: dict):
    user_id = message.from_user.id
    user_name = message.from_user.username if message.from_user.username else 'None'
    full_name = message.from_user.full_name if message.from_user.full_name else 'None'
    locale = message.from_user.language_code if message.from_user.language_code else 'ru'
    data = {'user_id':user_id,
                            'user_name':user_name,
                            'full_name':full_name,
                            'locale':locale,
                            'status':'member',
                            'flag':1}

    try:
        analytics = workflow_data['analytics']
        list_users = [user_id for user_id in await orm_get_ids(session)]
        chat_id = bot.home_group[0]
        if user_id not in list_users:
            await bot.send_message(chat_id=chat_id, text=_("‚úÖ @{user_name} - –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –±–æ—Ç–∞").format(user_name=user_name,
                                                                                                                        user_id=user_id))
            await message.answer(text=_('{user_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Factuality Test!\n\n'
                                        '–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π üá∑üá∫ \n\n'
                                        '–ñ–µ–ª–∞–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫?\n'
                                        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language').format(user_name=user_name))
            await message.answer(text=_('–≠—Ç–æ—Ç –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫–Ω–∏–≥–µ –ì–∞–Ω—Å–∞ –†–æ—Å–ª–∏–Ω–≥–∞ ¬´–§–∞–∫—Ç–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å¬ª. '
                                        '–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏–∑ 13 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –≤—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –º–∏—Ä–æ–≤—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏.\n\n'
                                        '–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?'),
                                reply_markup=keyboard.inline_start_test())
            await orm_add_user(session, data)

            await analytics(user_id=user_id,
                            category_name="/start",
                            command_name="/start")

        elif user_id in list_users:
            await message.answer(text=_('–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π üá∑üá∫ \n\n'
                                        '–ñ–µ–ª–∞–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫?\n'
                                        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language'))

            current_answer = await orm_get_answer(session, user_id)
            if current_answer == 1:
                await message.answer(text=_('Factuality Test\n\n'
                                            '–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?'),
                                     reply_markup=keyboard.inline_start_test())
            elif current_answer == 0:
                await message.answer(text=_('Factuality Test\n\n'
                                            '–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç!'))
            else:
                await message.answer(text=_('Factuality Test\n\n'
                                            '–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç?'),
                                     reply_markup=keyboard.inline_continue_test())

            await analytics(user_id=user_id,
                            category_name="/start",
                            command_name="/restart")

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", str(e))




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@start_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def process_user_blocked_bot(event: ChatMemberUpdated, session: AsyncSession, bot: Bot, workflow_data: dict):
    user_id = event.from_user.id
    chat_id = bot.home_group[0]
    user_name = event.from_user.username if event.from_user.username else event.from_user.full_name
    await orm_update_status(session, user_id, 'kicked')
    await bot.send_message(chat_id = chat_id, text = f"‚õîÔ∏è @{user_name} - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

    analytics = workflow_data['analytics']
    await analytics(user_id=user_id,
                    category_name="/start",
                    command_name="/blocked")

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@start_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def process_user_unblocked_bot(event: ChatMemberUpdated, session: AsyncSession, bot: Bot, workflow_data: dict):
    user_id = event.from_user.id

    if user_id in await orm_get_ids(session):
        chat_id = bot.home_group[0]
        full_name = event.from_user.full_name if event.from_user.full_name else "NaN"
        user_name = event.from_user.username if event.from_user.username else full_name
        await orm_update_status(session, user_id, 'member')
        await bot.send_message(chat_id = user_id, text = _('{full_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!').format(full_name=full_name))
        await bot.send_message(chat_id = chat_id, text = f"‚ôªÔ∏è @{user_name} - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

        analytics = workflow_data['analytics']
        await analytics(user_id=user_id,
                        category_name="/start",
                        command_name="/unblocked")
