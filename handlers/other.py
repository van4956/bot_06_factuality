import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from icecream import ic
ic.configureOutput(includeContext=True, prefix=' >>> Debag >>> ')

from aiogram import Router, F, Bot
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.utils.i18n import gettext as _

from database.orm_users import orm_update_locale
from common import keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
other_router = Router()



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def keyboard_language():
    button_1 = InlineKeyboardButton(text=_('üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π'), callback_data='locale_en')
    button_2 = InlineKeyboardButton(text=_('üá∑üá∫ –†—É—Å—Å–∫–∏–π'), callback_data='locale_ru')
    button_3 = InlineKeyboardButton(text=_('üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π'), callback_data='locale_de')
    # button_4 = InlineKeyboardButton(text=_('üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π'), callback_data='locale_fr')
    # button_5 = InlineKeyboardButton(text=_('üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π'), callback_data='locale_ja')

    return InlineKeyboardMarkup(inline_keyboard=[[button_1], [button_2], [button_3]])


# –≠—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É locale
@other_router.message(Command('language'))
async def locale_cmd(message: Message):
    await message.answer(_("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"), reply_markup=keyboard.del_kb)
    await message.answer(text=_('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫'),
                         reply_markup=keyboard_language())


@other_router.callback_query(F.data.startswith("locale_"))
async def update_locale_cmd(callback: CallbackQuery, session: AsyncSession, state: FSMContext, workflow_data: dict):
    user_id = callback.from_user.id

    if callback.data == 'locale_en':
        await orm_update_locale(session, user_id, 'en')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –±–¥
        await state.update_data(locale='en')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await callback.message.edit_text('Choose a language ', reply_markup=None)  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫—Ä—ã–≤–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.answer("Selected: üá∫üá∏ English")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
        await callback.message.answer("Current language \n\n üá∫üá∏ English") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    elif callback.data == 'locale_ru':
        await orm_update_locale(session, user_id, 'ru')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –±–¥
        await state.update_data(locale='ru')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ ', reply_markup=None)   # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫—Ä—ã–≤–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.answer("–í—ã–±—Ä–∞–Ω: üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
        await callback.message.answer("–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ \n\n üá∑üá∫ –†—É—Å—Å–∫–∏–π") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    elif callback.data == 'locale_de':
        await orm_update_locale(session, user_id, 'de')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –±–¥
        await state.update_data(locale='de')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await callback.message.edit_text('W√§hlen Sie eine Sprache ', reply_markup=None)  # type: ignore # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ,—Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.answer("Ausgew√§hlt üá©üá™ Deutsch")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
        await callback.message.answer("Aktuelle Sprache \n\n üá©üá™ Deutsch")   # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    analytics = workflow_data['analytics']
    await analytics(user_id=user_id,
                    category_name="/options",
                    command_name="/language")


# —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /information
@other_router.message(Command('information'))
async def information_cmd(message: Message, workflow_data: dict):
    await message.answer(text=_('üìö –û –±–æ—Ç–µ Factuality Test\n\n'
                                '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏ "–§–∞–∫—Ç–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å" –•–∞–Ω—Å–∞ –†–æ—Å–ª–∏–Ω–≥–∞, '
                                '–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ TED.\n\n'
                                'üéØ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:\n'
                                '‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç –∏–∑ 13 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö\n'
                                '‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ç—ã—Å—è—á–∞–º–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n'
                                '‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏—è –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ\n\n'
                                'üìä –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –í —Å—Ä–µ–¥–Ω–µ–º –ª—é–¥–∏ –æ—Ç–≤–µ—á–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 2-3 –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ 13. '
                                '–°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ?\n\n'
                                'ü§î –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?\n'
                                '–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–æ–ª–µ–µ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è '
                                '–∏ –∏–∑–±–µ–≥–∞—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π.\n\n'
                                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /factuality —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç!'))

    user_id = message.from_user.id
    analytics = workflow_data['analytics']
    await analytics(user_id=user_id,
                    category_name="/options",
                    command_name="/information")


# —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /terms
@other_router.message(Command('terms'))
async def terms_cmd(message: Message, workflow_data: dict):
    await message.answer(text=_('üìã –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Factuality Test\n\n'
                                '–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏:\n\n'
                                'üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:\n'
                                '‚Ä¢ –ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞\n'
                                '‚Ä¢ –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —è–∑—ã–∫)\n'
                                '‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞\n\n'
                                'üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:\n'
                                '‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n'
                                '‚Ä¢ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n'
                                '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n\n'
                                '‚ùå –û—Ç–∫–∞–∑ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n'
                                '‚Ä¢ –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop\n'
                                '‚Ä¢ –ò–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ Telegram\n'
                                '‚Ä¢ –ü—Ä–∏ —ç—Ç–æ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã\n\n'
                                '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @van4956'))

    user_id = message.from_user.id
    analytics = workflow_data['analytics']
    await analytics(user_id=user_id,
                    category_name="/options",
                    command_name="/terms")
